CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	
	Mux16(a = instruction, b = aluout, sel = instruction[15], out = muxa);
	
	
	Not(in = instruction[15], out = loadaregains);
	
	
	And(a = instruction[15], b = instruction[5], out = loadaregcins);

	
	Or(a = loadaregains, b = loadaregcins, out = loadareg);
	ARegister(in = muxa, load = loadareg, out = aregout, out[0..14] = addressM);
	
	
	Mux16(a = aregout, b = inM, sel = instruction[12], out = muxb);
	
	
	And(a = instruction[15], b = instruction[4], out = loaddreg);
	DRegister(in = aluout, load = loaddreg, out = dregout);
	
	
	And(a = instruction[15], b = instruction[3], out = writeM);
	
	
	ALU(x = dregout, y = muxb, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = aluout, zr = zrf, ng = ngf);
	
	
	Not(in = zrf, out = notzrf);
	Not(in = ngf, out = notngf);
	
	
	DMux8Way(in = instruction[15], sel = instruction[0..2], a = null, b = jgt, c = jeq, d = jge, e = jlt, f = jne, g = jle, h = jmp);
	
	
	And(a = notngf, b = notzrf, out = jgt2);
	And(a = jgt, b = jgt2, out = jgtout);	
	
	And(a = jeq, b = zrf, out = jeqout);

	And(a = jge, b = notngf, out = jgeout);

	And(a = jlt, b = ngf, out = jltout);
	
	And(a = jne, b = notzrf, out = jneout);
	
	Or(a = ngf, b = zrf, out = jle2);
	And(a = jle, b = jle2, out = jleout);


	
	Or8Way(in[0] = false, in[1] = jgtout, in[2] = jeqout, in[3] = jgeout, in[4] = jltout, in[5] = jneout, in[6] = jleout, in[7] = jmp, out = jumpout);
	
	
	Not(in = jumpout, out = njmpinc);	
	
	PC(in = aregout, load = jumpout, inc = njmpinc, reset = reset, out[0..14] = pc[0..14]);
}